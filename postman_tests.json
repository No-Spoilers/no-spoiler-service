{
	"info": {
		"_postman_id": "16358ccf-d057-4c3d-85b0-46bea88f4b1b",
		"name": "No-Spoilers Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomName = pm.variables.replaceIn('{{$randomFullName}}');\r",
							"const randomEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
							"const randomPassword = pm.variables.replaceIn('{{$randomPassword}}');\r",
							"\r",
							"pm.environment.set('testUserName', `Test-${randomName}`);\r",
							"pm.environment.set('testUserEmail', randomEmail);\r",
							"pm.environment.set('testUserPassword', randomPassword);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('POST /user should succeed', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test('POST /user should return created user', () => {\r",
							"    const { name, email, createdAt, token } = pm.response.json();\r",
							"    pm.expect(name).to.equal(pm.environment.get('testUserName'));\r",
							"    pm.expect(email).to.equal(pm.environment.get('testUserEmail'));\r",
							"    pm.expect(createdAt).to.be.a('string');\r",
							"    pm.expect(token).to.be.a('string');\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{testUserName}}\",\r\n    \"email\": \"{{testUserEmail}}\",\r\n    \"password\": \"{{testUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/user",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('POST /login should succeed', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('POST /login should return token', () => {\r",
							"    const { token } = pm.response.json();\r",
							"    pm.expect(token).to.be.a('string');\r",
							"    pm.environment.set('testUserToken', token);\r",
							"    const tokenParts = token.split('.');\r",
							"    const payload = JSON.parse(atob(tokenParts[1]));\r",
							"    pm.environment.set('testUserId', payload.sub);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{testUserEmail}}\",\r\n    \"password\": \"{{testUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/login",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Series",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomSuffix = Math.floor(Math.random() * 10000);\r",
							"pm.environment.set('testSeriesName', `Test Series ${randomSuffix}`);\r",
							"pm.environment.set('testSeriesText', pm.variables.replaceIn('{{$randomLoremSentences}}'));\r",
							"pm.environment.set('testPass', '0');\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('POST /series should succeed', () => {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test('POST /series should return created series', () => {\r",
							"    const { series: { name, seriesId, text } } = pm.response.json();\r",
							"    pm.expect(name).to.equal(pm.environment.get('testSeriesName'));\r",
							"    pm.expect(text).to.equal(pm.environment.get('testSeriesText'));\r",
							"    pm.expect(seriesId).to.be.a('string');\r",
							"    pm.environment.set('testSeriesId', seriesId);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{testSeriesName}}\",\r\n    \"text\": \"{{testSeriesText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/series",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"series"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Series",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('GET /series should succeed', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('GET /series should include test item', () => {\r",
							"    const seriesList = pm.response.json();\r",
							"    const filteredList = seriesList.filter(series => series.seriesId === pm.environment.get('testSeriesId'));\r",
							"    pm.expect(filteredList.length).to.equal(1);\r",
							"    const { seriesId, name, text, createdBy } = filteredList[0];\r",
							"    pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"    pm.expect(name).to.equal(pm.environment.get('testSeriesName'));\r",
							"    pm.expect(text).to.equal(pm.environment.get('testSeriesText'));\r",
							"    pm.expect(createdBy).to.equal(pm.environment.get('testUserId'));\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SPOILERS_HOST}}/series",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"series"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Series By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"\r",
							"    pm.test('GET /series/:id should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('GET /series/:id should include expected data', () => {\r",
							"        const allEntries = pm.response.json();\r",
							"        pm.expect(allEntries.length).to.equal(1);\r",
							"        const { seriesId, name, text, createdBy } = allEntries[0];\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(name).to.equal(pm.environment.get('testSeriesName'));\r",
							"        pm.expect(text).to.equal(pm.environment.get('testSeriesText'));\r",
							"        pm.expect(createdBy).to.equal(pm.environment.get('testUserId'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('GET /series/:id should fail with bad ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{SPOILERS_HOST}}/series/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"series",
						":seriesId"
					],
					"variable": [
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Series",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"\r",
							"    pm.test('PATCH /series/:id should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('PATCH /series/:id should return expected data', () => {\r",
							"        const { updatedSeries: { name, seriesId, text } } = pm.response.json();\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(name).to.equal(pm.environment.get('testSeriesName'));\r",
							"        pm.expect(text).to.equal(pm.environment.get('testSeriesText'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('PATCH /series/:id should fail with bad ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomSuffix = Math.floor(Math.random() * 10000);\r",
							"\r",
							"pm.environment.set('testSeriesName', `New Name ${randomSuffix}`);\r",
							"pm.environment.set('testSeriesText', pm.variables.replaceIn('{{$randomLoremSentences}}'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{testSeriesName}}\",\r\n    \"text\": \"{{testSeriesText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/series/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"series",
						":seriesId"
					],
					"variable": [
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Book to Series",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomSuffix = Math.floor(Math.random() * 10000);\r",
							"\r",
							"pm.environment.set('testBookName', `Test Book Name ${randomSuffix}`);\r",
							"pm.environment.set('testBookDate', pm.variables.replaceIn('{{$randomDatePast}}'));\r",
							"pm.environment.set('testBookText', pm.variables.replaceIn('{{$randomLoremSentences}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('POST /book should succeed', () => {\r",
							"        pm.response.to.have.status(201);\r",
							"    })\r",
							"\r",
							"    pm.test('POST /book should return updated info', () => {\r",
							"        const { name, bookId, text, createdBy } = pm.response.json();\r",
							"        pm.environment.set('testBookId', bookId);\r",
							"        pm.expect(name).to.equal(pm.environment.get('testBookName'));\r",
							"        pm.expect(text).to.equal(pm.environment.get('testBookText'));\r",
							"        pm.expect(createdBy).to.equal(pm.environment.get('testUserId'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('POST /book should not pass with bad Series ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"seriesId\": \"{{testSeriesId}}\", \r\n    \"name\": \"{{testBookName}}\",\r\n    \"pubDate\": \"{{testBookDate}}\",\r\n    \"text\": \"{{testBookText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/book",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomSuffix = Math.floor(Math.random() * 10000);\r",
							"\r",
							"pm.environment.set('testBookName', `New Name ${randomSuffix}`);\r",
							"pm.environment.set('testBookText', `New Text ${randomSuffix} ${pm.variables.replaceIn('{{$randomLoremSentences}}')}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('PATCH /book/:bookId/series/:seriesId should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('PATCH /book/:bookId/series/:seriesId should return updated info', () => {\r",
							"        const { name, text } = pm.response.json();\r",
							"        pm.expect(name).to.equal(pm.environment.get('testBookName'));\r",
							"        pm.expect(text).to.equal(pm.environment.get('testBookText'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('PATCH /book/:bookId/series/:seriesId should not pass with bad Book ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{testBookName}}\",\r\n    \"text\": \"{{testBookText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/book/:bookId/series/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"book",
						":bookId",
						"series",
						":seriesId"
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{testBookId}}"
						},
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Set Spoiler Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('PATCH /user should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('PATCH /user should return updated info', () => {\r",
							"        const { userId, seriesId, bookId } = pm.response.json();\r",
							"        pm.expect(userId).to.equal(pm.environment.get('testUserId'));\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(bookId).to.equal(pm.environment.get('testBookId'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('PATCH /user should not pass with bad Book ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"seriesId\": \"{{testSeriesId}}\",\r\n    \"bookId\": \"{{testBookId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/level",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"level"
					]
				},
				"description": "Spoiler level is determined by the most recent book a user has marked as read."
			},
			"response": []
		},
		{
			"name": "Create Entry",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('testEntryText', pm.variables.replaceIn('{{$randomLoremParagraph}}'));\r",
							"pm.environment.set('testEntryName', pm.variables.replaceIn('{{$randomFullName}}')); // Every entry will be about a person, place, item, group, or concept"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('POST /entry should succeed', () => {\r",
							"        pm.response.to.have.status(201);\r",
							"    })\r",
							"\r",
							"    pm.test('POST /entry should return updated info', () => {\r",
							"        const { seriesId, entryId, name, text, bookId } = pm.response.json();\r",
							"        pm.expect(text).to.equal(pm.environment.get('testEntryText'));\r",
							"        pm.expect(name).to.equal(pm.environment.get('testEntryName'));\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(bookId).to.equal(pm.environment.get('testBookId'));\r",
							"        pm.environment.set('testEntryId', entryId);\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('POST /entry should not pass with bad Series ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"seriesId\": \"{{testSeriesId}}\",\r\n    \"bookId\": \"{{testBookId}}\",\r\n    \"name\": \"{{testEntryName}}\",\r\n    \"text\": \"{{testEntryText}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/entry",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"entry"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('DELETE /entry/:entryId/series/:seriesId should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('DELETE /entry/:entryId/series/:seriesId should return deleted item', () => {\r",
							"        const { deletedEntry: { text, seriesId, entryId } } = pm.response.json();\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(entryId).to.equal(pm.environment.get('testEntryId'));\r",
							"        pm.expect(text).to.equal(pm.environment.get('testEntryText'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('DELETE /entry/:entryId/series/:seriesId should fail with bad ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{SPOILERS_HOST}}/entry/:entryId/series/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"entry",
						":entryId",
						"series",
						":seriesId"
					],
					"variable": [
						{
							"key": "entryId",
							"value": "{{testEntryId}}",
							"type": "string"
						},
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Spoiler Level",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('DELETE /level/:seriesId should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('DELETE /level/:seriesId should return deleted item', () => {\r",
							"        const { deletedLevel: { userId, seriesId } } = pm.response.json();\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(userId).to.equal(pm.environment.get('testUserId'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('DELETE /level/:seriesId should fail with bad ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{SPOILERS_HOST}}/level/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"level",
						":seriesId"
					],
					"variable": [
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('DELETE /book/:id should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('DELETE /book/:id should return deleted item', () => {\r",
							"        const { deletedBook: { name, bookId, seriesId } } = pm.response.json();\r",
							"        pm.expect(bookId).to.equal(pm.environment.get('testBookId'));\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(name).to.equal(pm.environment.get('testBookName'));\r",
							"    })\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('DELETE /book/:id should fail with bad ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{SPOILERS_HOST}}/book/:bookId/series/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"book",
						":bookId",
						"series",
						":seriesId"
					],
					"query": [
						{
							"key": "id",
							"value": "",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "bookId",
							"value": "{{testBookId}}",
							"type": "string"
						},
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Series",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const testPass = parseInt(pm.environment.get('testPass'));\r",
							"\r",
							"if (testPass === 0) {\r",
							"    pm.test('DELETE /series/:id should succeed', () => {\r",
							"        pm.response.to.have.status(200);\r",
							"    })\r",
							"\r",
							"    pm.test('DELETE /series/:id should return deleted item', () => {\r",
							"        const { deletedSeries: { name, seriesId } } = pm.response.json();\r",
							"        pm.expect(seriesId).to.equal(pm.environment.get('testSeriesId'));\r",
							"        pm.expect(name).to.equal(pm.environment.get('testSeriesName'));\r",
							"    })\r",
							"\r",
							"    // End of first pass\r",
							"    pm.environment.set('testPass', '1');\r",
							"    postman.setNextRequest('Get Series By ID');\r",
							"\r",
							"} else {\r",
							"\r",
							"    pm.test('DELETE /series/:id should fail with bad ID', () => {\r",
							"        pm.response.to.have.status(400);\r",
							"    })\r",
							"\r",
							"    // End of looping tests\r",
							"    pm.environment.set('testPass', '0');\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{SPOILERS_HOST}}/series/:seriesId",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"series",
						":seriesId"
					],
					"variable": [
						{
							"key": "seriesId",
							"value": "{{testSeriesId}}",
							"type": "string"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test('DELETE /user/:userId should succeed', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test('DELETE /series/:userId should return deleted item', () => {\r",
							"    const { deletedUser: { name, email } } = pm.response.json();\r",
							"    pm.expect(name).to.equal(pm.environment.get('testUserName'));\r",
							"    pm.expect(email).to.equal(pm.environment.get('testUserEmail'));\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{testUserToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{testUserEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{SPOILERS_HOST}}/user",
					"host": [
						"{{SPOILERS_HOST}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		}
	]
}